plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

project.ext.lwjglVersion = "3.3.0"
project.ext.jomlVersion = "1.10.2"
project.ext.lwjgl3AwtVersion = "0.1.8"
project.ext.lwjglNatives = "natives-windows"
project.ext.imguiVersion = '1.85.0'

group 'com.pafoid'
version '1.0-SNAPSHOT'

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

dependencies {
    // Default
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // JUnit
    testImplementation('junit:junit:4.13')

    // LWJGL
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"
    implementation "org.lwjglx:lwjgl3-awt:${lwjgl3AwtVersion}"

    // IM GUI
    implementation "io.github.spair:imgui-java-binding:$imguiVersion"
    implementation "io.github.spair:imgui-java-lwjgl3:$imguiVersion"
    implementation "io.github.spair:imgui-java-natives-windows:$imguiVersion"

    // GSON
    implementation 'com.google.code.gson:gson:2.8.9'

    // Box2D
    implementation name: 'jbox2d-library'

}

tasks.jar {
    manifest {
        attributes (
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'MainKt'
        )
    }
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

artifacts {
    archives fatJar
}

test {
    useJUnitPlatform()
}